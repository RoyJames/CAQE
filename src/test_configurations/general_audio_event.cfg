#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
A general pairwise (e.g. A is better than B) configuration for evaluating overall quality
of a set of audio stimuli.
"""
import itertools

# ---------------------------------------------------------------------------------------------
# TESTING VARIABLES
TEST_TYPE = 'audio_event'

# ---------------------------------------------------------------------------------------------
# FRONT-END VARIABLES
TEST_TIMEOUT_SEC = 5.
PREVIEW_HTML = """
    <p>This listening task aims to collect timings of audio events from a set of audio clips.</p>

    <p>During the test, you will be asked to mark the timing of specified audio event of the audio.
    The task description is as follows: During the task, you will listen to several recordings and mark when specified
    audio events happened.</p>

    <p>The expected total duration of the test is 10-15 minutes.</p>

    <p>However, if this is your first HIT in this group, there will also be additional surveys and hearing tests, which
    will increase the expected total duration of the first HIT is 15-20 minutes. Because this first HIT takes longer than
    the rest of the HITs in this group, you will be given an additional $0.30 bonus.</p>
    """

# ---------------------------------------------------------------------------------------------
# DEFAULT CONDITION AND TEST-SPECIFIC VARIABLES
#   (These will be configured for each condition and saved in the database)
test_title = 'Task: Mark the <audio_event>'

first_task_introduction_html = """
    <p>This listening task aims to collect timings of audio events from a set of audio clips.</p>

    <p>During the evaluation phase, you will listen to several of audio recordings and mark when the <audio_event> happened.
    Lastly, at the end, there will be a short survey which you will only have to fill out for the first HIT you
    complete.</p>
    """

introduction_html = """
    <p>This listening task aims to collect timings of audio events from a set of audio clips.</p>

    <p>During the training phase, you will be trained on example audio clips. During the evaluation phase,
    you will listen to several of audio recordings and mark when the <audio_event> happened.</p>
    """

training_instructions_html = """
    <p><audio_event_explanation></p>

    <p>Instructions:
    <ol>
    <li>If you have not done so already, set the volume of your headphones/speakers so that
    it's comfortable. The volume should be the same level when you listen to music leisurely.
    (the volume shouldn't be changed later on).</li>
    <li>Familiar yourself with the music recordings to have an idea of what kind of audio events we
    hope you to mark.</li>
    </ol>
    </p>
    """

evaluation_instructions_html = """
    <p>Listen to the music recordings below by clicking on their labeled
    buttons.</p>

    <p> To ensure you listen to the entire piece of a music clip, the first time you can only play the music without
    scrolling. After listen to the entire piece of a music clip for one time, you are then allowed to scroll through
    the clip to navigate to the desired marking time point.</p>

    <p>You can listen to the recordings as many times as you want before marking.</p>
    """

num_audio_files = 10

references = []

# The quality scales
audio_events = ['<b>audio event</b>', ]

# Descriptions of the quality scales
audio_event_explanations = ['<b>audio event</b> refers to a specific instance of moment in an audio perceived by human.', ]


# ---------------------------------------------------------------------------------------------
# TRAINING EXAMPLES FOR PARTICIPANTS
# These are the reference examples for the training examples
# List entries must be dicts composed as {<reference_name>: <example_url>, ...}
reference_example_dicts = [{}, ]

# These are the quality examples.
# List entries should be dicts composed as {<description>: <example_url>, ...}
audio_event_dicts = [{}, ]

TESTS = []
conditions = []
for audio_event, audio_event_explanation, reference_example_dict, audio_event_dict in zip(audio_events,
                                                                                          audio_event_explanations,
                                                                                          reference_example_dicts,
                                                                                          audio_event_dicts, ):
    test_cfg_vars = {}
    test_cfg_vars['references'] = references

    test_cfg_vars['reference_example_dict'] = reference_example_dict
    test_cfg_vars['audio_event_dict'] = audio_event_dict

    test_cfg_vars['test_title'] = test_title
    test_cfg_vars['test_title'] = test_cfg_vars['test_title'].replace('<audio_event>', audio_event)

    test_cfg_vars['introduction_html'] = introduction_html
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<audio_event_explanation>',
                                                                                    audio_event_explanation)

    test_cfg_vars['first_task_introduction_html'] = first_task_introduction_html
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<audio_event>',
                                                                                                          audio_event)
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<audio_event_explanation>',
                                                                                                          audio_event_explanation)

    test_cfg_vars['training_instructions_html'] = training_instructions_html
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<audio_event>',
                                                                                                      audio_event)
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<audio_event_explanation>',
                                                                                                      audio_event_explanation)

    test_cfg_vars['evaluation_instructions_html'] = evaluation_instructions_html
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<audio_event>',
                                                                                                          audio_event)
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<audio_event_explanation>',
                                                                                                          audio_event_explanation)

    test = {'test_config_variables': test_cfg_vars,
            'condition_groups': []}

    for i in range(1, num_audio_files + 1):
        data = {'audio_clips': [('Clip', 'exp%02d.wav' % i), ],
                }
        test['conditions'].append(data)
    TESTS.append(test)

# CONDITIONS_PER_EVALUATION = len(conditions) / 2
