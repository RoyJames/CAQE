#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
A pairwise (e.g. A is better than B configuration for evaluating output quality of audio source
separation algorithms on 4 different quality scales:

#. Preservation of the Target Sound
#. Suppression of Other Sounds
#. Absence of Additional Artificial Noise
#. Lack of Distortions to the Target Sound
"""
# ---------------------------------------------------------------------------------------------
# MECHANICAL TURK VARIABLES
DESCRIPTION = 'This listening test aims to rate the quality of a set of signals produced by ' \
              'source separation systems. Source separation aims to extract the signal of a ' \
              'target source from a mixture of several sound sources. The resulting signals may' \
              ' include several types of degradations compared to the clean target source, ' \
              'including distortions of the target source, remaining sounds from other sources ' \
              'and additional artificial noise. Note that while the maximum number assignments ' \
              'a worker can do is 2, it\'s possible that fewer than 2 may be available to you. ' \
              '**CHROME ONLY** **BONUS AVAILABLE**',

# ---------------------------------------------------------------------------------------------
# TESTING VARIABLES
TEST_TYPE = 'pairwise'

# ---------------------------------------------------------------------------------------------
# FRONT-END VARIABLES
TEST_TIMEOUT_SEC = 5.

PREVIEW_HTML = """
    <p>A sound separation system aims to extract a clean recording of a single target sound
    (e.g. the vocalist) from a recording containing a mixture of several sounds
    (e.g. the rest of the band). This listening test aims to rate the quality of
    recordings produced by different sound separation systems. Due to imperfections of each
    sound separation system, the output recording (e.g. vocals extracted from the
    mixture) may include several types of degradations compared to the clean target
    sound&mdash;it might be a little distorted, you still might be able to hear the background
    (a little or a lot), it might have strange artifacts.</p>

    <p>During the test, you will be asked to assess the quality of the audio. The test will have two main
    parts: 1) a training phase and 2) an evaluation phase. During the training phase, you will be trained
    on example ratings of quality. During the evaluation phase, you will listen to several of pairs
    of recordings and choose which recording in each pair has higher quality.</p>

    <p><b>You may receive up to a $0.25 bonus based on the consistency of your ratings.</b></p>

    <p>The expected total duration of the test is 5-7 minutes.</p>

    <p>However, if this is your first HIT in this group, there will also be additional surveys and hearing tests, which
    will increase the expected total duration of the first HIT is 8-10 minutes. Because this first HIT takes longer than
    the rest of the HITs in this group, you will be given an additional $0.30 bonus.</p>
    """

# ---------------------------------------------------------------------------------------------
# DEFAULT CONDITION AND TEST-SPECIFIC VARIABLES
#   (These will be configured for each condition and saved in the database)
# The HTML content of the introduction page the first time they do a task
test_title = 'Task: Rate the <quality>'

first_task_introduction_html = """
    <p>A sound separation system aims to extract a clean recording of a single target sound
    (e.g. the vocalist) from a recording containing a mixture of several sounds
    (e.g. the rest of the band). This listening test aims to rate the quality of
    recordings produced by different sound separation systems. Due to imperfections of each
    sound separation system, the output recording (e.g. vocals extracted from the
    mixture) may include several types of degradations compared to the clean target
    sound&mdash;it might be a little distorted, you still might be able to hear the background
    (a little or a lot), it might have strange artifacts.</p>

    <p>During the training phase, you will be trained on example ratings of quality.
    During the evaluation phase, you will listen to several of pairs of recordings and
    choose which recording in each pair has higher <quality>. Lastly, at the end, there
    will be a short survey which you will only have to fill out for the first HIT you
    complete.</p>
    """

# The HTML content of the introduction page (after the first time they perform the task)
introduction_html = """
    <p>A sound separation system aims to extract a clean recording of a single target sound
    (e.g. the vocalist) from a recording containing a mixture of several sounds
    (e.g. the rest of the band). This listening test aims to rate the quality of
    recordings produced by different sound separation systems. Due to imperfections of each
    sound separation system, the output recording (e.g. vocals extracted from the
    mixture) may include several types of degradations compared to the clean target
    sound&mdash;it might be a little distorted, you still might be able to hear the background
    (a little or a lot), it might have strange artifacts.</p>

    <p>During the training phase, you will be trained on example ratings of quality.
    During the evaluation phase, you will listen to several of pairs of recordings and
    choose which recording in each pair has higher <quality>.</p>
    """

training_instructions_html = """
    <p><quality_explanation></p>

    <p>Instructions:
    <ol>
    <li>If you have not done so already, set the volume of your headphones/speakers so that
    it's comfortable. You should be able to clearly hear differences between recordings
    (the volume shouldn't be changed later on).</li>
    <li>Train yourself on the example recordings to learn what types of recordings we
    expect to be higher or lower than average according to the quality scale.</li>
    </ol>
    </p>
    """

evaluation_instructions_html = """
    <p>Listen to the Target and Mixture recordings below by clicking on their labeled
    buttons. The Mixture and Target recordings will be the same for all pairs of
    A/B recordings.</p>

    <p>Listen to recordings A and B, and select which of the two recordings you would rate
    as having higher <quality>. <quality_explanation></p>

    <p>You can listen to the recordings as many times as you want before deciding.</p>
    """

num_audio_files = 10

references = (('Target', 'The target source which we are trying to isolate.'),
              ('Mixture', 'The mixture containing the target source and other sources.'))

# The quality scales
qualities = ['<b>overall quality</b> compared to the target sound for each recording',
             'quality in terms of <b>preservation of the target sound</b> in each recording',
             'quality in terms of <b>suppression of other sounds</b> in each recording',
             'quality in terms of <b>absence of additional artificial noise</b> in each recording',
             'quality in terms of <b>lack of distortions to the target sound</b> in each recording']

# Descriptions of the quality scales
quality_explanations = ['<b>Overall quality</b> refers to overall quality of the output of the sound separation '
                        'system, i.e. how well the target sound (e.g. a single voice) has been separated from the '
                        'mixture (e.g. a choir). Recordings should be rated based on how similar they are to the '
                        'target sound (e.g. the sound of a solo voice). For example, if a recording is very similar'
                        ' to the the target sound, it should be given a high rating. However, if a recording is '
                        'very different from the target sound (e.g. because of degradation or additional sounds), '
                        'it should be given a low rating.',
                        '<b>Preservation of the target sound</b> refers to how well the target sound (e.g. the '
                        'voice we\'re interested in isolating) has been preserved in the sound separation process. '
                        'For example, if the target sound is intact (but additional sounds possibly exist in the '
                        'recording), the recording should be given a high rating. However, if a recording is '
                        'missing parts of the target sound, it should be given a low rating.',
                        '<b>Suppression of other sound</b> refers to how well non-target sounds from the mixture '
                        'recording have been suppressed in the sound separation process. For example, if you cannot'
                        ' hear any of the non-target sounds from mixture in the recording, it should be given a '
                        'high rating (regardless of whether the target sound is well-preserved or not). However, '
                        'if many of the non-target sounds from the mixture are still in present in the recording, '
                        'it should be given a low rating.',
                        '<b>Absence of additional artificial noise</b> refers to the presence/absence of additional'
                        ' artificial noise that may have been introduced in the sound separation process. For '
                        'example, if a recording only contains sounds from the original mixture recording, it '
                        'should be given a high rating regardless of whether the target or non-target sounds are '
                        'completely intact. However, if the recording contains a lot of sounds (e.g. bleeps, '
                        'rumbles, pops) that are not in the original mixture, then the recording should be given a'
                        ' low rating.',
                        '<b>Lack of distortions to the target sound</b> refers to the amount of distortions to the'
                        ' target sound that may have been introduced in the sound separation process. For example,'
                        ' if the target sound is not distorted (regardless if other sounds from the mixture '
                        'recording are present), the recording should be given a high rating. However, if you '
                        'perceive the target sound as distorted in any way, it should be given a lower rating.']

# ---------------------------------------------------------------------------------------------
# TRAINING EXAMPLES FOR PARTICIPANTS
# These are the reference examples for the training examples
# List entries must be dicts composed as {<reference_name>: <example_url>, ...}
reference_example_dicts = [{'Target': '/audio/exp00_target.wav',
                            'Mixture': '/audio/exp00_anchorInterf.wav'},
                           {'Target': '/audio/exp00_target.wav',
                            'Mixture': '/audio/exp00_anchorInterf.wav'},
                           {'Target': '/audio/exp00_target.wav',
                            'Mixture': '/audio/exp00_anchorInterf.wav'},
                           {'Target': '/audio/exp00_target.wav',
                            'Mixture': '/audio/exp00_anchorInterf.wav'},
                           {'Target': '/audio/exp00_target.wav',
                            'Mixture': '/audio/exp00_anchorInterf.wav'}]

#
quality_example_dicts = [{'Low': ['/audio/exp00_anchorInterf.wav',
                                  '/audio/exp00_anchorArtif.wav',
                                  '/audio/exp00_anchorDistTarget.wav'],
                          'High': ['/audio/exp00_target.wav', ]},
                         {'Low': ['/audio/exp00_anchorDistTarget.wav'],
                          'High': ['/audio/exp00_anchorInterf.wav',
                                   '/audio/exp00_anchorArtif.wav',
                                   '/audio/exp00_target.wav']},
                         {'Low': ['/audio/exp00_anchorInterf.wav', ],
                          'High': ['/audio/exp00_anchorArtif.wav',
                                   '/audio/exp00_anchorDistTarget.wav',
                                   '/audio/exp00_target.wav']},
                         {'Low': ['/audio/exp00_anchorArtif.wav', ],
                          'High': ['/audio/exp00_anchorInterf.wav',
                                   '/audio/exp00_anchorDistTarget.wav',
                                   '/audio/exp00_target.wav']},
                         {'Low': ['/audio/exp00_anchorArtif.wav',
                                  '/audio/exp00_anchorDistTarget.wav'],
                          'High': ['/audio/exp00_anchorInterf.wav',
                                   '/audio/exp00_target.wav']}]

TESTS = []
for quality, quality_explanation, reference_example_dict, quality_example_dict in zip(qualities,
                                                                                      quality_explanations,
                                                                                      reference_example_dicts,
                                                                                      quality_example_dicts, ):
    test_cfg_vars = {}
    test_cfg_vars['references'] = references

    test_cfg_vars['reference_example_dict'] = reference_example_dict
    test_cfg_vars['quality_example_dict'] = quality_example_dict

    test_cfg_vars['test_title'] = test_title
    test_cfg_vars['test_title'] = test_cfg_vars['test_title'].replace('<quality>', quality)

    test_cfg_vars['introduction_html'] = introduction_html
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<quality>', quality)
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<quality_explanation>', quality_explanation)

    test_cfg_vars['first_task_introduction_html'] = first_task_introduction_html
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<quality>', quality)
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<quality_explanation>', quality_explanation)

    test_cfg_vars['training_instructions_html'] = training_instructions_html
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<quality>', quality)
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<quality_explanation>', quality_explanation)

    test_cfg_vars['evaluation_instructions_html'] = evaluation_instructions_html
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<quality>', quality)
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<quality_explanation>', quality_explanation)

    test = {'test_config_variables': test_cfg_vars,
            'conditions': []}

    for i in range(1, num_audio_files + 1):
        # THE AUDIO STIMULUS FILES
        data = {'reference_files': [('Reference', 'exp%02d_target.wav' % i),
                                    ('Mixture', 'exp%02d_anchorInterf.wav' % i)],
                'stimulus_files': [('S1', 'exp%02d_target.wav' % i),
                                   ('S2', 'exp%02d_anchorInterf.wav' % i),
                                   ('S3', 'exp%02d_anchorArtif.wav' % i),
                                   ('S4', 'exp%02d_anchorDistTarget.wav' % i),
                                   ('S5', 'exp%02d_test5.wav' % i),
                                   ('S6', 'exp%02d_test6.wav' % i),
                                   ('S7', 'exp%02d_test7.wav' % i),
                                   ('S8', 'exp%02d_test8.wav' % i)]}
        test['conditions'].append(data)
    TESTS.append(test)