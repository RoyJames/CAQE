#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
A general pairwise (e.g. A is better than B) configuration for evaluating overall quality
of a set of audio stimuli.
"""
import itertools

# ---------------------------------------------------------------------------------------------
# TESTING VARIABLES
TEST_TYPE = 'segmentation'

# ---------------------------------------------------------------------------------------------
# FRONT-END VARIABLES
TEST_TIMEOUT_SEC = 0.  # TODO: Development Setting
PREVIEW_HTML = """
    <p>This listening task aims to collect timings of section changes/boundaries in music clips.</p>

    <p>During the task, you will be asked to listen for the section boundaries of the music clips.
    The task description is as follows: During the task, you will listen to several recordings and mark when the section
    changes/boundaries happened.</p>

    <p>The expected total duration of the test is 10-15 minutes.</p>

    <p>However, if this is your first HIT in this group, there will also be additional surveys and hearing tests, which
    will increase the expected total duration of the first HIT is 15-20 minutes. Because this first HIT takes longer than
    the rest of the HITs in this group, you will be given an additional $0.30 bonus.</p>
    """

# ---------------------------------------------------------------------------------------------
# DEFAULT CONDITION AND TEST-SPECIFIC VARIABLES
#   (These will be configured for each condition and saved in the database)
test_title = 'Task: Mark the <audio_event>'

first_task_introduction_html = """
    <p>This listening task aims to collect timings of section changes/boundaries in music clips.</p>

    <p>During the evaluation phase, you will listen to several of audio recordings and mark when the <audio_event> happened.
    Lastly, at the end, there will be a short survey which you will only have to fill out for the first HIT you
    complete.</p>
    """

introduction_html = """
    <p>This listening task aims to collect timings of section changes/boundaries in music clips.</p>

    <p>During the evaluation phase, you will listen to several of audio recordings and mark when the <audio_event> happened.
    </p>
    """

training_instructions_html = """
    <p><audio_event_explanation></p>

    <p>Instructions:
    <ol>
    <li>If you have not done so already, set the volume of your headphones/speakers so that
    it's comfortable. The volume should be the same level when you listen to music leisurely.
    (the volume shouldn't be changed later on).</li>
    <li>Familiar yourself with the music recordings to have an idea of what kind of section changes/boundaries we
    hope you to mark.</li>
    </ol>
    </p>
    """

evaluation_instructions_html = """
    <p>To ensure you listen to the entire piece of a music clip, the first time you can only play the music without
    scrolling (click on the "<b>Play from the slider<\b>" button). After listen to the entire piece of a music clip for one time,
    you are then allowed to navigate through the clip using the <b>slider<\b> under the "pause" button, and play from
    where the slider is using the "<b>Play from the slider<\b>" button. </p>

    <p><b>To mark</b> the boundary, click on the <b>progress bar<\b> under the <b>slider<\b> to change the green portion in the progress bar
    to indicate when in the clip the boundary occurs. Listen to your selection using the "<b>Play from the selection<\b>" button" to
    play from where the green progress bar is.
    </p>

    <p>If after listening to the clip there is no change of section happened, click on the "<b>No change heard<\b>" button, otherwise,
    click on the "<b>Submit current selection position<\b>" to confirm your selection and click on "<b>Next trial<\b>" to continue the task.

    <p>You can listen to the recordings as many times as you want before marking.</p>
    """

# TODO: Development Setting
num_test_sets = 3
num_audio_files = 3

references = (('Reference', 'The reference signal to which test signals are compared.'),)

# The audio event description
audio_events = ['<b>music section changes/boundaries</b>', ]

# Descriptions of the quality scales
audio_event_explanations = [
    '<b>music section changes/boundaries</b> refers to the moment when a section of a song changes'
    ' to another section, such as the moment when intro ends and the 1st verse begins, chorus ends '
    'and the solo begins, 1st chorus ends and the second begins, etc.', ]

# ---------------------------------------------------------------------------------------------
# TRAINING EXAMPLES FOR PARTICIPANTS
# These are the reference examples for the training examples
# List entries must be dicts composed as {<reference_name>: <example_url>, ...}
reference_example_dicts = [{'Reference': '/audio/exp00_target.wav', }, ]

# These are the quality examples.
# List entries should be dicts composed as {<description>: <example_url>, ...}
quality_example_dicts = [{'Low': ['/audio/exp00_anchorArtif.wav',
                                  '/audio/exp00_anchorDistTarget.wav'],
                          'High': ['/audio/exp00_target.wav', ]}, ]

TESTS = []
conditions = []
for audio_event, audio_event_explanation, reference_example_dict, quality_example_dict in zip(audio_events,
                                                                                              audio_event_explanations,
                                                                                              reference_example_dicts,
                                                                                              quality_example_dicts, ):
    test_cfg_vars = {}
    test_cfg_vars['references'] = references

    test_cfg_vars['reference_example_dict'] = reference_example_dict
    test_cfg_vars['quality_example_dict'] = quality_example_dict

    test_cfg_vars['test_title'] = test_title
    test_cfg_vars['test_title'] = test_cfg_vars['test_title'].replace('<audio_event>', audio_event)

    test_cfg_vars['introduction_html'] = introduction_html
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test_cfg_vars['first_task_introduction_html'] = first_task_introduction_html
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test_cfg_vars['training_instructions_html'] = training_instructions_html
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test_cfg_vars['evaluation_instructions_html'] = evaluation_instructions_html
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test = {'test_config_variables': test_cfg_vars,
            'condition_groups': []}

    for i in range(1, num_test_sets + 1):
        # THE AUDIO STIMULUS FILES
        group_data = {'reference_files': [['Reference', 'seg%02d_01.wav' % i, ]],
                      'stimulus_files': []}
        for j in range(1, num_audio_files+1):
            group_data['stimulus_files'].append(['S%02d_%02d' % (i, j), 'seg%02d_%02d.wav' % (i, j)])

        conditions = []
        for clip in group_data['stimulus_files']:
            condition_data = {
                'reference_keys': ['Reference', ],
                'stimulus_keys': (clip[0], clip[0]),
                'evaluation_instructions_html': None
            }
            conditions.append(condition_data)
        group_data['conditions'] = conditions
        test['condition_groups'].append(group_data)
    TESTS.append(test)

CONDITIONS_PER_EVALUATION = len(conditions)
